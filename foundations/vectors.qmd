---
title: "vectors"
format: html
editor: visual
---

Vectors come in two flavors: atomic vectors and lists. Every vector can also have attributes which is a named list of arbitrary metadata. The dimension attribute turns vectors into matrices and arrays, and the class attribute powers the S3 object system.

## Atomic Vectors

4 main types: logical, integer, double, and character. 2 rare types: complex and raw (won't really need these)

When the inputs are atomic vectors, c() always creates another atomic vector; i.e. it flattens:

```{r}
c(c(1,2), c(3,4))
```

you can use `typeof()` to determine the type of a vector

```{r}
typeof(c(1L,2L,3L))
```

R represents missing values with NA. Missing values tend to be infectious: most computations involving a missing value will return another missing value.

```{r}
NA > 5
```

For atomic vectors, type is a property of the entire vector: all elements must be the same type. When you attempt to combine different types they will be coerced in a fixed order: character -\> double -\> integer -\> logical

```{r}
c("a", 1)
c(5L, TRUE)
```

## S3 atomic vectors

Having a class attribute turns an object into an S3 object, which means that it will behave differently from a regular vector when passed to a generic function. Three important S3 objects in R are factors, dates, and POSIXct.

### Factors

While x is still of type "integer", it's attributes include it's class and levels

```{r}
x <- factor(c("a", "b", "b", "a"))
x

typeof(x)
attributes(x)
```

### Dates

```{r}
today <- Sys.Date()

typeof(today)
attributes(today)
```

### Date-times

Portable Operating System Interface calendar time - POSIXct

```{r}
now_ct <- as.POSIXct("2018-08-01 22:00", tz = "UTC")
now_ct
```

```{r}
typeof(now_ct)
attributes(now_ct)
```

## Lists

Lists are a step up in complexity from atomic vectors: each element can be any type, not just vectors. Each element in a list is just a reference to another object!

```{r}
l1 <- list(
  1:3, 
  "a", 
  c(TRUE, FALSE, TRUE), 
  c(2.3, 5.9)
)
```

## Data frames and Tibbles

S3 vectors that are built on top of lists. They are just named lists of vectors. The attributes describe the row and column names as well as the class. Importantly, the length of each vector must be the same

```{r}
df1 <- data.frame(x = 1:3, y = letters[1:3])
typeof(df1)


attributes(df1)
```


Creating a tibble is similar to creating a data frame. The difference between the two is that tibbles never coerce their input (this is one feature that makes them lazy):

```{r}
df2 <- tibble(
  x = 1:3, 
  y = c("a", "b", "c")
)
```

There is one final difference: tibble() allows you to refer to variables created during construction:

```{r}
tibble(
  x = 1:4,
  y = x*2
)

data.frame(
  x = 1:4,
  y = x*3
)
```

List columns are easier to use with tibbles because they can be directly included inside tibble() and they will be printed tidily:

```{r}
tibble(
  x = 1:3,
  y = list(1:2, 2:3, 4:49)
)
```

## NULL

NULL is special because it has a unique type, is always length zero, and canâ€™t have any attributes:

```{r}
typeof(NULL)
length(NULL)
attributes(NULL)
```


The two common uses of NULL are to represent an empty vector and to represent an absent vector
