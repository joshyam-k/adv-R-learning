---
title: "Environments"
format: html
editor: visual
---

### Environment Basics

Like a list, but with some important exceptions

- every name must be unique
- unordered
- an environment has a parent
- environments are not copied when modified

```{r}
e1 <- rlang::env(
  a = FALSE,
  b = "a",
  c = 2.3,
  d = 1:3,
)
```

The current environment, or `current_env()` is the environment in which code is currently executing. When you’re experimenting interactively, that’s usually the global environment, or `global_env()`.

Parent environments are what are used to implement lexical scoping, R looks into the parent environment if it does not find a variable in the current one. This goes up until we reach the global environment at which point we stop.

Super assignment `<<-` modifies an existing variable found in a parent environment (this feels like pointers in C).

`rlang::env_*` contains a whole multitude of functions that can be used to modify or affect an environment


### Special Environments

#### Package Environments

Each packaged attached by `library()` becomes one of the parents of the global environment. This works in sort of a insertion way, where the last loaded library is the immediate parent of the global environment.


#### Function Environment

A function binds the current environment when it is created (this is what enables lexical scoping)

Functions that capture (or enclose) their environments are called closures (object of type closure is not subsettable :0)

#### Namespaces

Every function in a package is associated with a pair of environments: the package environment, which you learned about earlier, and the namespace environment.

- package environment is the external interface of the package
- namespace environment is the internal interface to the package. The package environment controls how we find the function; the namespace controls how the function finds its variables. (So cool!).

So as long as you the user makes sure that you are using the right function, then any functions internal to that function will work correctly because of the namespace environment.

Importantly, every binding in the package environment is also found in the namespace environment; this ensures every function can use every other function in the package. 


#### Execution Environment

ephemeral. after function completion, the environment will be garbage collected. In other words these work exactly how we expect they work.

### Call Stacks

very nice way to visualize how the call stack functions. I'm assuming that frames are popped from the stack in reverse order. (cst stands for call stack tree)

```{r}
f <- function(x) {
  g(x = 2)
}
g <- function(x) {
  h(x = 3)
}
h <- function(x) {
  stop()
}

h <- function(x) {
  lobstr::cst()
}

f(x = 1)
```


#### Frames

A frame has 3 main components:

- an expression giving the function call
- an environment (typically the execution environment)
- a parent (the previous frame in the call stack)


